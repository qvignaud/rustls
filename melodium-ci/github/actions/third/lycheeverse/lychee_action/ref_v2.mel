use cicd/services/github::replicateContextsForComposite
use cicd/services/github::runAction
use javascript::JavaScriptEngine
use log/logger::Logger
use std/data/string_map::StringMap
use std/data/string_map::|entry
use std/data/string_map::|map
use std/ops/option::|wrap

#[generated(true)]
#[github_action(lycheeverse/lychee-action@v2)]
treatment lycheeAction[contexts: JavaScriptEngine, logger: Logger](
        var args: string = "--verbose --no-progress './**/*.md' './**/*.html' './**/*.rst'",
        var checkbox: string = "true",
        var debug: string = "false",
        var fail: string = "true",
        var fail_if_empty: string = "true",
        var format: string = "markdown",
        var job_summary: string = "true",
        var lychee_version: string = "v0.19.1",
        var output: string = "lychee/out.md",
        var token: string = "${{ github.token }}",
        var working_directory: string = "."
)
  input trigger: Block<void>
  output completed: Block<void>
  output continue: Block<void>
  output failed: Block<void>
  model composite_contexts: JavaScriptEngine()
{
    cleanUpExistingLycheeBinary: runAction[contexts = contexts, logger = logger](
        commands = ${# Remove any existing lychee binary to prevent conflicts
rm -f "$HOME/.local/bin/lychee"
},
        display_name = "Clean up existing lychee binary",
        name = "cleanUpExistingLycheeBinary",
        shell = "bash"
    )
    installLychee: runAction[contexts = contexts, logger = logger](
        commands = ${{{# Install lychee from the temporary directory
install -t "$HOME/.local/bin" -D "${{ steps.lychee-setup.outputs.temp_dir }}/lychee"
}}},
        display_name = "Install lychee",
        name = "installLychee",
        shell = "bash"
    )
    lycheeSetup: runAction[contexts = contexts, logger = logger](
        commands = ${{# Create a temporary directory for downloads and extraction
TEMP_DIR="${RUNNER_TEMP}/lychee-download"
mkdir -p "${TEMP_DIR}"
cd "${TEMP_DIR}"

ARCH=$(uname -m)
# Determine filename and download URL based on version
if [[ "${LYCHEE_VERSION}" =~ ^v0\.0|^v0\.1[0-5]\. ]]; then
  FILENAME="lychee-${LYCHEE_VERSION}-${ARCH}-unknown-linux-gnu.tar.gz"
  DOWNLOAD_URL="https://github.com/lycheeverse/lychee/releases/download/${LYCHEE_VERSION}/${FILENAME}"
else
  FILENAME="lychee-${ARCH}-unknown-linux-gnu.tar.gz"
  if [[ "${LYCHEE_VERSION}" == 'nightly' ]]; then
    DOWNLOAD_URL="https://github.com/lycheeverse/lychee/releases/download/nightly/${FILENAME}"
  elif [[ "${LYCHEE_VERSION}" == 'latest' ]]; then
    DOWNLOAD_URL="https://github.com/lycheeverse/lychee/releases/latest/download/${FILENAME}"
  else
    DOWNLOAD_URL="https://github.com/lycheeverse/lychee/releases/download/lychee-${LYCHEE_VERSION}/${FILENAME}"
  fi
fi

echo "Downloading from: ${DOWNLOAD_URL}"
curl -sfLO "${DOWNLOAD_URL}"

echo "Extracting ${FILENAME}"
tar -xvzf "${FILENAME}"

# Output temp directory for use in later steps
echo "temp_dir=${TEMP_DIR}" >> $GITHUB_OUTPUT
}},
        display_name = "Download and extract lychee in temp directory",
        env = |wrap<StringMap>(
        |map(
            [|entry(
                    "LYCHEE_VERSION",
                    "${{ inputs.lycheeVersion }}"
                    )]
            )
        ),
        id = "lychee-setup",
        name = "lycheeSetup",
        shell = "bash"
    )
    replicateContextsForComposite[composite_contexts = composite_contexts, main_contexts = contexts](
        inputs = |map(
        [|entry(
                "args",
                ""
                ),
            |entry(
                "debug",
                ""
                ),
            |entry(
                "fail",
                ""
                ),
            |entry(
                "failIfEmpty",
                ""
                ),
            |entry(
                "format",
                ""
                ),
            |entry(
                "jobSummary",
                ""
                ),
            |entry(
                "lycheeVersion",
                ""
                ),
            |entry(
                "output",
                ""
                ),
            |entry(
                "checkbox",
                ""
                ),
            |entry(
                "token",
                ""
                ),
            |entry(
                "workingDirectory",
                ""
                )]
        )
    )
    runLychee: runAction[contexts = contexts, logger = logger](
        commands = "${{ github.action_path }}/entrypoint.sh",
        display_name = "Run Lychee",
        env = |wrap<StringMap>(
        |map(
            [|entry(
                    "INPUT_TOKEN",
                    "${{ inputs.TOKEN }}"
                    ),
                |entry(
                    "INPUT_JOBSUMMARY",
                    "${{ inputs.JOBSUMMARY }}"
                    ),
                |entry(
                    "INPUT_ARGS",
                    "${{ inputs.ARGS }}"
                    ),
                |entry(
                    "INPUT_FAILIFEMPTY",
                    "${{ inputs.FAILIFEMPTY }}"
                    ),
                |entry(
                    "INPUT_DEBUG",
                    "${{ inputs.DEBUG }}"
                    ),
                |entry(
                    "INPUT_FORMAT",
                    "${{ inputs.FORMAT }}"
                    ),
                |entry(
                    "INPUT_OUTPUT",
                    "${{ inputs.OUTPUT }}"
                    ),
                |entry(
                    "INPUT_FAIL",
                    "${{ inputs.FAIL }}"
                    ),
                |entry(
                    "INPUT_CHECKBOX",
                    "${{ inputs.CHECKBOX }}"
                    )]
            )
        ),
        id = "run-lychee",
        name = "runLychee",
        shell = "bash",
        working_directory = "${{ inputs.workingDirectory }}"
    )
    setUpEnvironment: runAction[contexts = contexts, logger = logger](
        commands = ${echo "$HOME/.local/bin" >> "$GITHUB_PATH"
mkdir -p "$HOME/.local/bin"
},
        display_name = "Set up environment",
        name = "setUpEnvironment",
        shell = "bash"
    )

    Self.trigger -> replicateContextsForComposite.trigger
    replicateContextsForComposite.ready -> setUpEnvironment.trigger
    setUpEnvironment.continue -> cleanUpExistingLycheeBinary.trigger
    cleanUpExistingLycheeBinary.continue -> lycheeSetup.trigger
    lycheeSetup.continue -> installLychee.trigger
    installLychee.continue -> runLychee.trigger
    runLychee.completed -> Self.completed
    runLychee.failed -> Self.failed
    runLychee.continue -> Self.continue
}

